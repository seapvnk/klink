#!/bin/bash

# constants
ROOT=$(pwd)
PASTE_FILE="$ROOT/.pastefile"

# usage()
# show command-line usage
function usage
{
    echo -e "\
        Klink -- version 1.0
        Usage: ./klink <dir> <param>=<value>
        \t-s or --server receiving a port as args to serve a preview in given port\n
        "
}

# build ($folder, $dashes, $dots)
# iterate over all files recursively parsing the files depending on it's name
function build
{
    cd $1
    for file in *; do

        prefix=$3
        export AP="$prefix" include="$ROOT/kparse"

        if grep -q "@" <<< "$file"; then continue
        
        elif cat $PASTE_FILE | grep $file; then
            
            cp -R $file  $prefix/build/$file
            continue

        elif [[ -d $file ]] && [[ '.' != $file ]] && [[ '..' != $file ]]; then
            
            if [[ $2 = '/' ]]; then
                mkdir $prefix/build/$2/$file 
                build $file $file $3/..
                continue
            else
                build $file $2/$file $3/..
            fi

        fi

        if [[ $file = 'index.html' ]]; then
            
            if [[ $2 != '/' ]]; then
                $prefix/kparse $file > $prefix/build/$2/$file
            else
                $prefix/kparse $file > ../build/$file
            fi

        else

            if [[ $2 != '/' ]]; then
                mkdir $prefix/build/$2/${file%.html}
                touch $prefix/build/$2/${file%.html}/index.html
                $prefix/kparse $file > $prefix/build/$2/${file%.html}/index.html
            else
                mkdir ../build/${file%.html}
                touch ../build/${file%.html}/index.html
                $prefix/kparse $file > ../build/${file%.html}/index.html
            fi
            
        fi

    done
    cd ..
}

# make_build($dir)
# make validations in order to build a directory
function make_build
{
    if [[ -z $1 ]]; then usage && exit; fi
    if [[ -d build ]]; then rm -rf build; fi
    
    mkdir build && build $1 '/' ..
}


function make_paste_file
{
    if [[ -e .pastefile ]]; then
        rm .pastefile
    fi

    touch .pastefile

    while read p; do
        echo $p >> .pastefile
        if [[ -d $p ]]; then ls -R $p >> .pastefile; fi 
    done < .paste

}

# serve($port)
# create a http server to static site
function serve
{
    
    cd build
    python -m http.server $1
    cd ..
}

# script start
make_paste_file
make_build $1

rm .pastefile

while [ "$2" != "" ]; do
    
    PARAM=`echo $2 | awk -F= '{print $1}'`
    VALUE=`echo $2 | awk -F= '{print $2}'`

    case $PARAM in
        --serve | -s)
            if [[ -z $VALUE ]]; then VALUE=80; fi
            serve $VALUE
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac
    shift
done
